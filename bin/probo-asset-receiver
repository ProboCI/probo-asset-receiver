#! /usr/bin/env node
/* eslint no-process-exit: 0, lines-around-comment: 0 */
'use strict';

var Loader = require('yaml-config-loader');
var bunyan = require('bunyan');
var yargs = require('yargs');
var loader = new Loader({stopOnError: false});
var path = require('path');

var logger = bunyan.createLogger({name: 'probo-asset-receiver'});

var app = require('..');

var argv = yargs
    .describe('database-data-directory', 'The directory in which to store the LevelDB database.')
    .alias('database-data-directory', 'D')
    .describe('file-data-directory', 'The directory in which to store uploaded file assets.')
    .alias('file-data-directory', 'F')
    .describe('config', 'A path to a one or more configuration files or directories.')
    .alias('config', 'c')
    .describe('help', 'Display help message')
    .alias('help', 'h')
    .describe('host', 'The host to listen on (defaults to 0.0.0.0).')
    .alias('host', 'H')
    .describe('port', 'The port to listen on.')
    .alias('port', 'p')
    .argv
;

if (argv.help) {
  yargs.showHelp();
  process.exit();
}

loader.on('error', function(error) {
  // Ignore errors due to missing files.
});

loader.add(path.join(__dirname, '..', 'defaults.yaml'), {filterKeys: true});
loader.addAndNormalizeObject(process.env);

if (argv.config) {
  if (typeof argv.config === 'string') {
    argv.config = [argv.config];
  }
  for (var i in argv.config) {
    if (argv.config.hasOwnProperty(i)) {
      loader.add(path.resolve(argv.config[i]));
    }
  }
}

loader.addAndNormalizeObject(argv);

loader.load(function(error, config) {
  config.logger = logger;
  var server = new app.lib.Server(config);

  server.start(function() {
    logger.info('Now listening on ' + config.host + ':' + config.port, {host: config.host, port: config.port});
  });

});
